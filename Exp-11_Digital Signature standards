#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Function to calculate gcd using Euclidean Algorithm
unsigned long long gcd(unsigned long long a, unsigned long long b) {
    while (b != 0) {
        unsigned long long t = b;
        b = a % b;
        a = t;
    }
    return a;
}

// Extended Euclidean Algorithm to find the modular inverse
unsigned long long modInverse(unsigned long long a, unsigned long long m) {
    unsigned long long m0 = m, t, q;
    unsigned long long x0 = 0, x1 = 1;

    if (m == 1)
        return 0;

    while (a > 1) {
        q = a / m;
        t = m;
        m = a % m;
        a = t;
        t = x0;
        x0 = x1 - q * x0;
        x1 = t;
    }

    if (x1 < 0)
        x1 += m0;

    return x1;
}

#define P 23 // Example prime number
#define Q 11 // Example prime number
#define G 2  // Example generator

// Structure to hold the keys
typedef struct {
    unsigned long long privateKey;
    unsigned long long publicKey;
} DSAKeyPair;

// Structure to hold the signature
typedef struct {
    unsigned long long r;
    unsigned long long s;
} DSASignature;

// Function to generate keys
DSAKeyPair generateKeys() {
    DSAKeyPair keys;
    keys.privateKey = rand() % (Q - 1) + 1; // Private key (0 < privateKey < Q)
    keys.publicKey = 1;
    unsigned long long i;
    
    for (i= 0; i < keys.privateKey; i++) {
        keys.publicKey = (keys.publicKey * G) % P;
    }
    return keys;
}

// Function to sign a message
DSASignature signMessage(unsigned long long message, DSAKeyPair keys) {
    DSASignature signature;
    unsigned long long k;

    do {
        k = rand() % (Q - 1) + 1; // Random number (0 < k < Q)
    } while (gcd(k, Q) != 1); // Ensure k is coprime with Q

    // Compute r
    signature.r = 1;
    unsigned long long i ;
    for (i= 0; i < k; i++) {
        signature.r = (signature.r * G) % P;
    }
    signature.r = signature.r % Q;

    // Compute k_inv (modular inverse of k)
    unsigned long long k_inv = modInverse(k, Q);

    // Compute s
    signature.s = (k_inv * (message + keys.privateKey * signature.r)) % Q;

    return signature;
}

// Function to verify a signature
int verifySignature(unsigned long long message, DSASignature signature, unsigned long long publicKey) {
    if (signature.r <= 0 || signature.r >= Q || signature.s <= 0 || signature.s >= Q)
        return 0;

    unsigned long long w = modInverse(signature.s, Q);
    unsigned long long u1 = (message * w) % Q;
    unsigned long long u2 = (signature.r * w) % Q;

    unsigned long long v = 1;
    unsigned long long i;
    for (i = 0; i < u1; i++) {
        v = (v * G) % P;
    }
  
    for ( i = 0; i < u2; i++) {
        v = (v * publicKey) % P;
    }
    v = v % Q;

    return v == signature.r;
}

int main() {
    srand(time(0)); // Seed for random number generation

    // Generate keys
    DSAKeyPair keys = generateKeys();
    printf("Private Key: %llu\n", keys.privateKey);
    printf("Public Key: %llu\n", keys.publicKey);

    // Message to be signed
    unsigned long long message = 15; // Example message

    // Sign the message
    DSASignature signature = signMessage(message, keys);
    printf("Signature (r, s): (%llu, %llu)\n", signature.r, signature.s);

    // Verify the signature
    int isValid = verifySignature(message, signature, keys.publicKey);
    printf("Signature is %s\n", isValid ? "valid" : "invalid");

    return 0;
}
